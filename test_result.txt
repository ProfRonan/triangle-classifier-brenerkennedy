============================= test session starts ==============================
platform linux -- Python 3.10.10, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/seuronao/Documents/Triangle Classifier-04-24-2023-04-46-29/brenerkennedy
collected 12 items

test_main.py FFFFFFFFFFFF                                                [100%]

=================================== FAILURES ===================================
_________________________ test_equilátero[test_input0] _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec091fd930>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "1", "1"],
            ["2", "2", "2"],
            ["5", "5", "5"],
        ],
    )
    def test_equilátero(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
>       assert "Equilátero" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Equilátero' in 'os valores formam um triângulo equilátero'
E        +  where 'os valores formam um triângulo equilátero' = <built-in method strip of str object at 0x7fec0932fbb0>()
E        +    where <built-in method strip of str object at 0x7fec0932fbb0> = 'os valores formam um triângulo equilátero \n'.strip
E        +      where 'os valores formam um triângulo equilátero \n' = <built-in method getvalue of _io.StringIO object at 0x7fec09231cf0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec09231cf0> = <_io.StringIO object at 0x7fec09231cf0>.getvalue

test_main.py:30: AssertionError
_________________________ test_equilátero[test_input1] _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec091ef7f0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "1", "1"],
            ["2", "2", "2"],
            ["5", "5", "5"],
        ],
    )
    def test_equilátero(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
>       assert "Equilátero" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Equilátero' in 'os valores formam um triângulo equilátero'
E        +  where 'os valores formam um triângulo equilátero' = <built-in method strip of str object at 0x7fec091df230>()
E        +    where <built-in method strip of str object at 0x7fec091df230> = 'os valores formam um triângulo equilátero \n'.strip
E        +      where 'os valores formam um triângulo equilátero \n' = <built-in method getvalue of _io.StringIO object at 0x7fec09232b90>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec09232b90> = <_io.StringIO object at 0x7fec09232b90>.getvalue

test_main.py:30: AssertionError
_________________________ test_equilátero[test_input2] _________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093bb730>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "1", "1"],
            ["2", "2", "2"],
            ["5", "5", "5"],
        ],
    )
    def test_equilátero(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
>       assert "Equilátero" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Equilátero' in 'os valores formam um triângulo equilátero'
E        +  where 'os valores formam um triângulo equilátero' = <built-in method strip of str object at 0x7fec091df3b0>()
E        +    where <built-in method strip of str object at 0x7fec091df3b0> = 'os valores formam um triângulo equilátero \n'.strip
E        +      where 'os valores formam um triângulo equilátero \n' = <built-in method getvalue of _io.StringIO object at 0x7fec09232ef0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec09232ef0> = <_io.StringIO object at 0x7fec09232ef0>.getvalue

test_main.py:30: AssertionError
_________________________ test_isósceles[test_input0] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093e69b0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "2", "3"],
            ["3", "2", "2"],
            ["2", "3", "2"],
        ],
    )
    def test_isósceles(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
>       assert "Isósceles" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Isósceles' in 'os valores formam um triângulo isóceles'
E        +  where 'os valores formam um triângulo isóceles' = <built-in method strip of str object at 0x7fec091df1b0>()
E        +    where <built-in method strip of str object at 0x7fec091df1b0> = 'os valores formam um triângulo isóceles\n'.strip
E        +      where 'os valores formam um triângulo isóceles\n' = <built-in method getvalue of _io.StringIO object at 0x7fec092331c0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec092331c0> = <_io.StringIO object at 0x7fec092331c0>.getvalue

test_main.py:56: AssertionError
_________________________ test_isósceles[test_input1] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093bafe0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "2", "3"],
            ["3", "2", "2"],
            ["2", "3", "2"],
        ],
    )
    def test_isósceles(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
>       assert "Isósceles" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Isósceles' in 'os valores formam um triângulo isóceles'
E        +  where 'os valores formam um triângulo isóceles' = <built-in method strip of str object at 0x7fec091df630>()
E        +    where <built-in method strip of str object at 0x7fec091df630> = 'os valores formam um triângulo isóceles\n'.strip
E        +      where 'os valores formam um triângulo isóceles\n' = <built-in method getvalue of _io.StringIO object at 0x7fec092332e0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec092332e0> = <_io.StringIO object at 0x7fec092332e0>.getvalue

test_main.py:56: AssertionError
_________________________ test_isósceles[test_input2] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093e5390>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "2", "3"],
            ["3", "2", "2"],
            ["2", "3", "2"],
        ],
    )
    def test_isósceles(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
>       assert "Isósceles" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Isósceles' in 'os valores formam um triângulo esqualeno'
E        +  where 'os valores formam um triângulo esqualeno' = <built-in method strip of str object at 0x7fec091df5b0>()
E        +    where <built-in method strip of str object at 0x7fec091df5b0> = 'os valores formam um triângulo esqualeno\n'.strip
E        +      where 'os valores formam um triângulo esqualeno\n' = <built-in method getvalue of _io.StringIO object at 0x7fec09233400>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec09233400> = <_io.StringIO object at 0x7fec09233400>.getvalue

test_main.py:56: AssertionError
__________________________ test_escaleno[test_input0] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093bb610>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "3", "4"],
            ["2", "4", "3"],
            ["4", "2", "3"],
        ],
    )
    def test_escaleno(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
        assert "Isósceles" not in mocked_stdout.getvalue().strip()
>       assert "Escaleno" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Escaleno' in 'os valores formam um triângulo esqualeno'
E        +  where 'os valores formam um triângulo esqualeno' = <built-in method strip of str object at 0x7fec091df730>()
E        +    where <built-in method strip of str object at 0x7fec091df730> = 'os valores formam um triângulo esqualeno\n'.strip
E        +      where 'os valores formam um triângulo esqualeno\n' = <built-in method getvalue of _io.StringIO object at 0x7fec092337f0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec092337f0> = <_io.StringIO object at 0x7fec092337f0>.getvalue

test_main.py:82: AssertionError
__________________________ test_escaleno[test_input1] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093e7430>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "3", "4"],
            ["2", "4", "3"],
            ["4", "2", "3"],
        ],
    )
    def test_escaleno(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
        assert "Isósceles" not in mocked_stdout.getvalue().strip()
>       assert "Escaleno" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Escaleno' in 'os valores formam um triângulo esqualeno'
E        +  where 'os valores formam um triângulo esqualeno' = <built-in method strip of str object at 0x7fec091df330>()
E        +    where <built-in method strip of str object at 0x7fec091df330> = 'os valores formam um triângulo esqualeno\n'.strip
E        +      where 'os valores formam um triângulo esqualeno\n' = <built-in method getvalue of _io.StringIO object at 0x7fec09231a20>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec09231a20> = <_io.StringIO object at 0x7fec09231a20>.getvalue

test_main.py:82: AssertionError
__________________________ test_escaleno[test_input2] __________________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093bad40>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["2", "3", "4"],
            ["2", "4", "3"],
            ["4", "2", "3"],
        ],
    )
    def test_escaleno(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
        assert "Não é um triângulo" not in mocked_stdout.getvalue().strip()
        assert "Equilátero" not in mocked_stdout.getvalue().strip()
        assert "Isósceles" not in mocked_stdout.getvalue().strip()
>       assert "Escaleno" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Escaleno' in 'os valores formam um triângulo esqualeno'
E        +  where 'os valores formam um triângulo esqualeno' = <built-in method strip of str object at 0x7fec091df3b0>()
E        +    where <built-in method strip of str object at 0x7fec091df3b0> = 'os valores formam um triângulo esqualeno\n'.strip
E        +      where 'os valores formam um triângulo esqualeno\n' = <built-in method getvalue of _io.StringIO object at 0x7fec09233eb0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec09233eb0> = <_io.StringIO object at 0x7fec09233eb0>.getvalue

test_main.py:82: AssertionError
_____________________ test_não_é_um_triângulo[test_input0] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093e62c0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'os valores não formam um triângulo'
E        +  where 'os valores não formam um triângulo' = <built-in method strip of str object at 0x7fec0922e090>()
E        +    where <built-in method strip of str object at 0x7fec0922e090> = 'os valores não formam um triângulo \n'.strip
E        +      where 'os valores não formam um triângulo \n' = <built-in method getvalue of _io.StringIO object at 0x7fec09233400>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec09233400> = <_io.StringIO object at 0x7fec09233400>.getvalue

test_main.py:104: AssertionError
_____________________ test_não_é_um_triângulo[test_input1] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093bada0>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'os valores não formam um triângulo'
E        +  where 'os valores não formam um triângulo' = <built-in method strip of str object at 0x7fec0922d450>()
E        +    where <built-in method strip of str object at 0x7fec0922d450> = 'os valores não formam um triângulo \n'.strip
E        +      where 'os valores não formam um triângulo \n' = <built-in method getvalue of _io.StringIO object at 0x7fec092332e0>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec092332e0> = <_io.StringIO object at 0x7fec092332e0>.getvalue

test_main.py:104: AssertionError
_____________________ test_não_é_um_triângulo[test_input2] _____________________

monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x7fec093e7250>
test_input = []

    @pytest.mark.parametrize(
        "test_input",
        [
            ["1", "2", "3"],
            ["1", "3", "2"],
            ["3", "1", "2"],
        ],
    )
    def test_não_é_um_triângulo(monkeypatch: MonkeyPatch, test_input: str):
        mocked_input = lambda prompt="": test_input.pop(0)
        mocked_stdout = io.StringIO()
    
        with monkeypatch.context() as m:
            m.setattr(builtins, "input", mocked_input)
            m.setattr(sys, "stdout", mocked_stdout)
    
            sys.modules.pop("main", None)
            importlib.import_module(name="main", package="files")
    
>       assert "Não é um triângulo" in mocked_stdout.getvalue().strip()
E       AssertionError: assert 'Não é um triângulo' in 'os valores não formam um triângulo'
E        +  where 'os valores não formam um triângulo' = <built-in method strip of str object at 0x7fec0922f8a0>()
E        +    where <built-in method strip of str object at 0x7fec0922f8a0> = 'os valores não formam um triângulo \n'.strip
E        +      where 'os valores não formam um triângulo \n' = <built-in method getvalue of _io.StringIO object at 0x7fec09233490>()
E        +        where <built-in method getvalue of _io.StringIO object at 0x7fec09233490> = <_io.StringIO object at 0x7fec09233490>.getvalue

test_main.py:104: AssertionError
=========================== short test summary info ============================
FAILED test_main.py::test_equilátero[test_input0] - AssertionError: assert 'E...
FAILED test_main.py::test_equilátero[test_input1] - AssertionError: assert 'E...
FAILED test_main.py::test_equilátero[test_input2] - AssertionError: assert 'E...
FAILED test_main.py::test_isósceles[test_input0] - AssertionError: assert 'Is...
FAILED test_main.py::test_isósceles[test_input1] - AssertionError: assert 'Is...
FAILED test_main.py::test_isósceles[test_input2] - AssertionError: assert 'Is...
FAILED test_main.py::test_escaleno[test_input0] - AssertionError: assert 'Esc...
FAILED test_main.py::test_escaleno[test_input1] - AssertionError: assert 'Esc...
FAILED test_main.py::test_escaleno[test_input2] - AssertionError: assert 'Esc...
FAILED test_main.py::test_não_é_um_triângulo[test_input0] - AssertionError: a...
FAILED test_main.py::test_não_é_um_triângulo[test_input1] - AssertionError: a...
FAILED test_main.py::test_não_é_um_triângulo[test_input2] - AssertionError: a...
============================== 12 failed in 0.09s ==============================
